HotSpot虚拟机配置参数
1, 分配对象空间时候是否开启线程专属的缓存:
    -XX：+/-UseTLAB
2,

实战内存溢出
1, 堆内存溢出
    (1)设置堆内存空间大小, 设置为不扩展; (2)不断增加对象数量(保持和GCRoot之间的可达路径)
    (3)Dump出内存溢出时, 内存快照
    参数设置:
    -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError

    解决对内存溢出的方法:
    根据dump出来的日志, 分析是内存溢出还是内存泄露
    (1)内存泄露, 根据日志定位泄露的位置
    (2)内存溢出, 设置更合适的对内存

2, 虚拟机栈和本地方法栈溢出
    参数设置:
    -Xss128k
3, 方法区, 运行时常量池溢出
    JDK6中, 方法区设置在永久区中
    -XX：PermSize和-XX：MaxPermSize可以间接设置方法区的大小

    JDK7 运行时常量池存放在堆中
    JDK 7中-XX：MaxPermSize参数

    JDK8 方法区
    在JDK 8及以上版本使用-XX：MaxMeta-spaceSize参数


    方法区的内存溢出试验
    永久代实现: jdk7及之前
    -XX:PermSize=10M -XX:MaxPermSize=10M
    metaspace实现: jdk8及之后
    -XX：MaxMetaspaceSize: 元空间最大值, 默认是-1, 即不限制, 或者说只受限与本地内存大小
    -XX：MetaspaceSize: 指定元空间的初始空间大小, 达到这个值就触发垃圾收集; 同时会对该值进行动态调整
    -XX：MinMetaspaceFreeRatio: 垃圾收集之后控制最小的元空间剩余百分比
    -XX：Max-MetaspaceFreeRatio

4, 本机直接内存溢出

    -XX：MaxDirectMemorySize
    如果不指定, 默认与Java堆的最大值一致: -Xmx



打印GC日志
-XX:+PrintGCDetails

[GC (System.gc()) [PSYoungGen: 8032K->808K(56832K)] 8032K->816K(186880K), 0.0022120 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
[Full GC (System.gc())
    [PSYoungGen: 808K->0K(56832K)]
    [ParOldGen: 8K->644K(130048K)] 816K->644K(186880K),
    [Metaspace: 3276K->3276K(1056768K)], 0.0053851 secs]
    [Times: user=0.00 sys=0.00, real=0.00 secs]
Heap
 PSYoungGen      total 56832K, used 1474K [0x0000000780c00000, 0x0000000784b00000, 0x00000007c0000000)
  eden space 49152K, 3% used [0x0000000780c00000,0x0000000780d70bc8,0x0000000783c00000)
  from space 7680K, 0% used [0x0000000783c00000,0x0000000783c00000,0x0000000784380000)
  to   space 7680K, 0% used [0x0000000784380000,0x0000000784380000,0x0000000784b00000)
 ParOldGen       total 130048K, used 644K [0x0000000702400000, 0x000000070a300000, 0x0000000780c00000)
  object space 130048K, 0% used [0x0000000702400000,0x00000007024a13c8,0x000000070a300000)
 Metaspace       used 3288K, capacity 4496K, committed 4864K, reserved 1056768K
  class space    used 357K, capacity 388K, committed 512K, reserved 1048576K