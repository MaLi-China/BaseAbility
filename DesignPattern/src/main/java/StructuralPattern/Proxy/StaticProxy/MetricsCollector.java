package StructuralPattern.Proxy.StaticProxy;

/**
 * 功能说明：指标收集器(非业务功能)
 * 用于代表非业务功能: 在代理类中, 要增加的非业务功能
 * 类似的还有: 日志, 监控, 鉴权, 统计, 限流, 事务, 幂等, 等等...
 * 存在目的: 用于对业务功能进行增强
 * 如何将该代码增强业务功能呢?
 * <p>
 * 方式1: 静态代理
 * 1, 为每一个原始类创建一个代理类(方式: 实现接口/继承原始类), 注入业务对象与非业务对象;
 * 2, 对要增强的方法: 增强代码+委托原始类的业务代码+增强代码的形式, 实现增强
 * <p>
 * 方式2: 动态代理(推荐)
 * 代码阶段: 在代理类中, 通过动态代理技术, 创建代理对象, 拦截指定方法添加非业务功能, 委托原始类实现业务功能
 * 运行阶段: 使用Java提供动态代理技术: 在运行时创建原始类的代理类
 * <p>
 * 方式3: 装饰器模式(不推荐)
 * 在行为效果上, 都可以实现增强
 * 代理模式的增强: 添加非业务功能
 * 装饰器模式的增强: 弥补或者扩展业务功能
 * <p>
 * 开发人员：@Author MaLi
 * 开发日期：@Date  2021/5/3
 */
public class MetricsCollector {
    /**
     * 模拟指标收集
     *
     * @param some
     */
    public void recordRequest(Object some) {
        System.out.println("metrics has been collected");
    }
}
